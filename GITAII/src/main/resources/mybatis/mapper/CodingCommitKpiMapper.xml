<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ai.aif.gitai.dao.mapper.CodingCommitKpiMapper">
  <resultMap id="BaseResultMap" type="com.ai.aif.gitai.dao.entity.CodingCommitKpi">
    <id column="commit_kpi_id" jdbcType="BIGINT" property="commitKpiId" />
    <result column="commit_id" jdbcType="VARCHAR" property="commitId" />
    <result column="author_name" jdbcType="VARCHAR" property="authorName" />
    <result column="author_email" jdbcType="VARCHAR" property="authorEmail" />
    <result column="repository_id" jdbcType="BIGINT" property="repositoryId" />
    <result column="branch_name" jdbcType="VARCHAR" property="branchName" />
    <result column="commit_message" jdbcType="VARCHAR" property="commitMessage" />
    <result column="commit_lines" jdbcType="INTEGER" property="commitLines" />
    <result column="commit_time" jdbcType="TIMESTAMP" property="commitTime" />
    <result column="additions" jdbcType="INTEGER" property="additions" />
    <result column="deletions" jdbcType="INTEGER" property="deletions" />
    <result column="update_message" jdbcType="VARCHAR" property="updateMessage" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    commit_kpi_id, commit_id, author_name, author_email, repository_id, branch_name, 
    commit_message, commit_lines, commit_time, additions, deletions, update_message
  </sql>
  <select id="selectByExample" parameterType="com.ai.aif.gitai.dao.entity.CodingCommitKpiExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_coding_commit_kpi
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_coding_commit_kpi
    where commit_kpi_id = #{commitKpiId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_coding_commit_kpi
    where commit_kpi_id = #{commitKpiId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.ai.aif.gitai.dao.entity.CodingCommitKpiExample">
    delete from t_coding_commit_kpi
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ai.aif.gitai.dao.entity.CodingCommitKpi">
    <selectKey keyProperty="commitKpiId" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_coding_commit_kpi (commit_id, author_name, author_email, 
      repository_id, branch_name, commit_message, 
      commit_lines, commit_time, additions, 
      deletions, update_message)
    values (#{commitId,jdbcType=VARCHAR}, #{authorName,jdbcType=VARCHAR}, #{authorEmail,jdbcType=VARCHAR}, 
      #{repositoryId,jdbcType=BIGINT}, #{branchName,jdbcType=VARCHAR}, #{commitMessage,jdbcType=VARCHAR}, 
      #{commitLines,jdbcType=INTEGER}, #{commitTime,jdbcType=TIMESTAMP}, #{additions,jdbcType=INTEGER}, 
      #{deletions,jdbcType=INTEGER}, #{updateMessage,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.ai.aif.gitai.dao.entity.CodingCommitKpi">
    <selectKey keyProperty="commitKpiId" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_coding_commit_kpi
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="commitId != null">
        commit_id,
      </if>
      <if test="authorName != null">
        author_name,
      </if>
      <if test="authorEmail != null">
        author_email,
      </if>
      <if test="repositoryId != null">
        repository_id,
      </if>
      <if test="branchName != null">
        branch_name,
      </if>
      <if test="commitMessage != null">
        commit_message,
      </if>
      <if test="commitLines != null">
        commit_lines,
      </if>
      <if test="commitTime != null">
        commit_time,
      </if>
      <if test="additions != null">
        additions,
      </if>
      <if test="deletions != null">
        deletions,
      </if>
      <if test="updateMessage != null">
        update_message,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="commitId != null">
        #{commitId,jdbcType=VARCHAR},
      </if>
      <if test="authorName != null">
        #{authorName,jdbcType=VARCHAR},
      </if>
      <if test="authorEmail != null">
        #{authorEmail,jdbcType=VARCHAR},
      </if>
      <if test="repositoryId != null">
        #{repositoryId,jdbcType=BIGINT},
      </if>
      <if test="branchName != null">
        #{branchName,jdbcType=VARCHAR},
      </if>
      <if test="commitMessage != null">
        #{commitMessage,jdbcType=VARCHAR},
      </if>
      <if test="commitLines != null">
        #{commitLines,jdbcType=INTEGER},
      </if>
      <if test="commitTime != null">
        #{commitTime,jdbcType=TIMESTAMP},
      </if>
      <if test="additions != null">
        #{additions,jdbcType=INTEGER},
      </if>
      <if test="deletions != null">
        #{deletions,jdbcType=INTEGER},
      </if>
      <if test="updateMessage != null">
        #{updateMessage,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ai.aif.gitai.dao.entity.CodingCommitKpiExample" resultType="java.lang.Long">
    select count(*) from t_coding_commit_kpi
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_coding_commit_kpi
    <set>
      <if test="record.commitKpiId != null">
        commit_kpi_id = #{record.commitKpiId,jdbcType=BIGINT},
      </if>
      <if test="record.commitId != null">
        commit_id = #{record.commitId,jdbcType=VARCHAR},
      </if>
      <if test="record.authorName != null">
        author_name = #{record.authorName,jdbcType=VARCHAR},
      </if>
      <if test="record.authorEmail != null">
        author_email = #{record.authorEmail,jdbcType=VARCHAR},
      </if>
      <if test="record.repositoryId != null">
        repository_id = #{record.repositoryId,jdbcType=BIGINT},
      </if>
      <if test="record.branchName != null">
        branch_name = #{record.branchName,jdbcType=VARCHAR},
      </if>
      <if test="record.commitMessage != null">
        commit_message = #{record.commitMessage,jdbcType=VARCHAR},
      </if>
      <if test="record.commitLines != null">
        commit_lines = #{record.commitLines,jdbcType=INTEGER},
      </if>
      <if test="record.commitTime != null">
        commit_time = #{record.commitTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.additions != null">
        additions = #{record.additions,jdbcType=INTEGER},
      </if>
      <if test="record.deletions != null">
        deletions = #{record.deletions,jdbcType=INTEGER},
      </if>
      <if test="record.updateMessage != null">
        update_message = #{record.updateMessage,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_coding_commit_kpi
    set commit_kpi_id = #{record.commitKpiId,jdbcType=BIGINT},
      commit_id = #{record.commitId,jdbcType=VARCHAR},
      author_name = #{record.authorName,jdbcType=VARCHAR},
      author_email = #{record.authorEmail,jdbcType=VARCHAR},
      repository_id = #{record.repositoryId,jdbcType=BIGINT},
      branch_name = #{record.branchName,jdbcType=VARCHAR},
      commit_message = #{record.commitMessage,jdbcType=VARCHAR},
      commit_lines = #{record.commitLines,jdbcType=INTEGER},
      commit_time = #{record.commitTime,jdbcType=TIMESTAMP},
      additions = #{record.additions,jdbcType=INTEGER},
      deletions = #{record.deletions,jdbcType=INTEGER},
      update_message = #{record.updateMessage,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ai.aif.gitai.dao.entity.CodingCommitKpi">
    update t_coding_commit_kpi
    <set>
      <if test="commitId != null">
        commit_id = #{commitId,jdbcType=VARCHAR},
      </if>
      <if test="authorName != null">
        author_name = #{authorName,jdbcType=VARCHAR},
      </if>
      <if test="authorEmail != null">
        author_email = #{authorEmail,jdbcType=VARCHAR},
      </if>
      <if test="repositoryId != null">
        repository_id = #{repositoryId,jdbcType=BIGINT},
      </if>
      <if test="branchName != null">
        branch_name = #{branchName,jdbcType=VARCHAR},
      </if>
      <if test="commitMessage != null">
        commit_message = #{commitMessage,jdbcType=VARCHAR},
      </if>
      <if test="commitLines != null">
        commit_lines = #{commitLines,jdbcType=INTEGER},
      </if>
      <if test="commitTime != null">
        commit_time = #{commitTime,jdbcType=TIMESTAMP},
      </if>
      <if test="additions != null">
        additions = #{additions,jdbcType=INTEGER},
      </if>
      <if test="deletions != null">
        deletions = #{deletions,jdbcType=INTEGER},
      </if>
      <if test="updateMessage != null">
        update_message = #{updateMessage,jdbcType=VARCHAR},
      </if>
    </set>
    where commit_kpi_id = #{commitKpiId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ai.aif.gitai.dao.entity.CodingCommitKpi">
    update t_coding_commit_kpi
    set commit_id = #{commitId,jdbcType=VARCHAR},
      author_name = #{authorName,jdbcType=VARCHAR},
      author_email = #{authorEmail,jdbcType=VARCHAR},
      repository_id = #{repositoryId,jdbcType=BIGINT},
      branch_name = #{branchName,jdbcType=VARCHAR},
      commit_message = #{commitMessage,jdbcType=VARCHAR},
      commit_lines = #{commitLines,jdbcType=INTEGER},
      commit_time = #{commitTime,jdbcType=TIMESTAMP},
      additions = #{additions,jdbcType=INTEGER},
      deletions = #{deletions,jdbcType=INTEGER},
      update_message = #{updateMessage,jdbcType=VARCHAR}
    where commit_kpi_id = #{commitKpiId,jdbcType=BIGINT}
  </update>
  <resultMap id="BaseResultMap" type="com.ai.aif.gitai.dao.entity.CodingCommitKpi">
    <id column="commit_kpi_id" jdbcType="BIGINT" property="commitKpiId" />
    <result column="commit_id" jdbcType="VARCHAR" property="commitId" />
    <result column="author_name" jdbcType="VARCHAR" property="authorName" />
    <result column="author_email" jdbcType="VARCHAR" property="authorEmail" />
    <result column="repository_id" jdbcType="BIGINT" property="repositoryId" />
    <result column="branch_name" jdbcType="VARCHAR" property="branchName" />
    <result column="commit_message" jdbcType="VARCHAR" property="commitMessage" />
    <result column="commit_lines" jdbcType="INTEGER" property="commitLines" />
    <result column="commit_time" jdbcType="TIMESTAMP" property="commitTime" />
    <result column="additions" jdbcType="INTEGER" property="additions" />
    <result column="deletions" jdbcType="INTEGER" property="deletions" />
    <result column="update_message" jdbcType="VARCHAR" property="updateMessage" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    commit_kpi_id, commit_id, author_name, author_email, repository_id, branch_name, 
    commit_message, commit_lines, commit_time, additions, deletions, update_message
  </sql>
  <select id="selectByExample" parameterType="com.ai.aif.gitai.dao.entity.CodingCommitKpiExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_coding_commit_kpi
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_coding_commit_kpi
    where commit_kpi_id = #{commitKpiId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_coding_commit_kpi
    where commit_kpi_id = #{commitKpiId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.ai.aif.gitai.dao.entity.CodingCommitKpiExample">
    delete from t_coding_commit_kpi
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ai.aif.gitai.dao.entity.CodingCommitKpi">
    <selectKey keyProperty="commitKpiId" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_coding_commit_kpi (commit_id, author_name, author_email, 
      repository_id, branch_name, commit_message, 
      commit_lines, commit_time, additions, 
      deletions, update_message)
    values (#{commitId,jdbcType=VARCHAR}, #{authorName,jdbcType=VARCHAR}, #{authorEmail,jdbcType=VARCHAR}, 
      #{repositoryId,jdbcType=BIGINT}, #{branchName,jdbcType=VARCHAR}, #{commitMessage,jdbcType=VARCHAR}, 
      #{commitLines,jdbcType=INTEGER}, #{commitTime,jdbcType=TIMESTAMP}, #{additions,jdbcType=INTEGER}, 
      #{deletions,jdbcType=INTEGER}, #{updateMessage,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.ai.aif.gitai.dao.entity.CodingCommitKpi">
    <selectKey keyProperty="commitKpiId" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_coding_commit_kpi
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="commitId != null">
        commit_id,
      </if>
      <if test="authorName != null">
        author_name,
      </if>
      <if test="authorEmail != null">
        author_email,
      </if>
      <if test="repositoryId != null">
        repository_id,
      </if>
      <if test="branchName != null">
        branch_name,
      </if>
      <if test="commitMessage != null">
        commit_message,
      </if>
      <if test="commitLines != null">
        commit_lines,
      </if>
      <if test="commitTime != null">
        commit_time,
      </if>
      <if test="additions != null">
        additions,
      </if>
      <if test="deletions != null">
        deletions,
      </if>
      <if test="updateMessage != null">
        update_message,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="commitId != null">
        #{commitId,jdbcType=VARCHAR},
      </if>
      <if test="authorName != null">
        #{authorName,jdbcType=VARCHAR},
      </if>
      <if test="authorEmail != null">
        #{authorEmail,jdbcType=VARCHAR},
      </if>
      <if test="repositoryId != null">
        #{repositoryId,jdbcType=BIGINT},
      </if>
      <if test="branchName != null">
        #{branchName,jdbcType=VARCHAR},
      </if>
      <if test="commitMessage != null">
        #{commitMessage,jdbcType=VARCHAR},
      </if>
      <if test="commitLines != null">
        #{commitLines,jdbcType=INTEGER},
      </if>
      <if test="commitTime != null">
        #{commitTime,jdbcType=TIMESTAMP},
      </if>
      <if test="additions != null">
        #{additions,jdbcType=INTEGER},
      </if>
      <if test="deletions != null">
        #{deletions,jdbcType=INTEGER},
      </if>
      <if test="updateMessage != null">
        #{updateMessage,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ai.aif.gitai.dao.entity.CodingCommitKpiExample" resultType="java.lang.Long">
    select count(*) from t_coding_commit_kpi
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_coding_commit_kpi
    <set>
      <if test="record.commitKpiId != null">
        commit_kpi_id = #{record.commitKpiId,jdbcType=BIGINT},
      </if>
      <if test="record.commitId != null">
        commit_id = #{record.commitId,jdbcType=VARCHAR},
      </if>
      <if test="record.authorName != null">
        author_name = #{record.authorName,jdbcType=VARCHAR},
      </if>
      <if test="record.authorEmail != null">
        author_email = #{record.authorEmail,jdbcType=VARCHAR},
      </if>
      <if test="record.repositoryId != null">
        repository_id = #{record.repositoryId,jdbcType=BIGINT},
      </if>
      <if test="record.branchName != null">
        branch_name = #{record.branchName,jdbcType=VARCHAR},
      </if>
      <if test="record.commitMessage != null">
        commit_message = #{record.commitMessage,jdbcType=VARCHAR},
      </if>
      <if test="record.commitLines != null">
        commit_lines = #{record.commitLines,jdbcType=INTEGER},
      </if>
      <if test="record.commitTime != null">
        commit_time = #{record.commitTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.additions != null">
        additions = #{record.additions,jdbcType=INTEGER},
      </if>
      <if test="record.deletions != null">
        deletions = #{record.deletions,jdbcType=INTEGER},
      </if>
      <if test="record.updateMessage != null">
        update_message = #{record.updateMessage,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_coding_commit_kpi
    set commit_kpi_id = #{record.commitKpiId,jdbcType=BIGINT},
      commit_id = #{record.commitId,jdbcType=VARCHAR},
      author_name = #{record.authorName,jdbcType=VARCHAR},
      author_email = #{record.authorEmail,jdbcType=VARCHAR},
      repository_id = #{record.repositoryId,jdbcType=BIGINT},
      branch_name = #{record.branchName,jdbcType=VARCHAR},
      commit_message = #{record.commitMessage,jdbcType=VARCHAR},
      commit_lines = #{record.commitLines,jdbcType=INTEGER},
      commit_time = #{record.commitTime,jdbcType=TIMESTAMP},
      additions = #{record.additions,jdbcType=INTEGER},
      deletions = #{record.deletions,jdbcType=INTEGER},
      update_message = #{record.updateMessage,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ai.aif.gitai.dao.entity.CodingCommitKpi">
    update t_coding_commit_kpi
    <set>
      <if test="commitId != null">
        commit_id = #{commitId,jdbcType=VARCHAR},
      </if>
      <if test="authorName != null">
        author_name = #{authorName,jdbcType=VARCHAR},
      </if>
      <if test="authorEmail != null">
        author_email = #{authorEmail,jdbcType=VARCHAR},
      </if>
      <if test="repositoryId != null">
        repository_id = #{repositoryId,jdbcType=BIGINT},
      </if>
      <if test="branchName != null">
        branch_name = #{branchName,jdbcType=VARCHAR},
      </if>
      <if test="commitMessage != null">
        commit_message = #{commitMessage,jdbcType=VARCHAR},
      </if>
      <if test="commitLines != null">
        commit_lines = #{commitLines,jdbcType=INTEGER},
      </if>
      <if test="commitTime != null">
        commit_time = #{commitTime,jdbcType=TIMESTAMP},
      </if>
      <if test="additions != null">
        additions = #{additions,jdbcType=INTEGER},
      </if>
      <if test="deletions != null">
        deletions = #{deletions,jdbcType=INTEGER},
      </if>
      <if test="updateMessage != null">
        update_message = #{updateMessage,jdbcType=VARCHAR},
      </if>
    </set>
    where commit_kpi_id = #{commitKpiId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ai.aif.gitai.dao.entity.CodingCommitKpi">
    update t_coding_commit_kpi
    set commit_id = #{commitId,jdbcType=VARCHAR},
      author_name = #{authorName,jdbcType=VARCHAR},
      author_email = #{authorEmail,jdbcType=VARCHAR},
      repository_id = #{repositoryId,jdbcType=BIGINT},
      branch_name = #{branchName,jdbcType=VARCHAR},
      commit_message = #{commitMessage,jdbcType=VARCHAR},
      commit_lines = #{commitLines,jdbcType=INTEGER},
      commit_time = #{commitTime,jdbcType=TIMESTAMP},
      additions = #{additions,jdbcType=INTEGER},
      deletions = #{deletions,jdbcType=INTEGER},
      update_message = #{updateMessage,jdbcType=VARCHAR}
    where commit_kpi_id = #{commitKpiId,jdbcType=BIGINT}
  </update>
</mapper>